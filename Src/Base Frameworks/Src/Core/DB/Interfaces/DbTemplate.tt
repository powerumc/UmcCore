<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#  var tables = tableTemplate.Execute();

	var tableProjectItem = AddFolder("Tables");
	foreach(var catalog in tables.TABLE_CATALOGS) {
	   foreach(var schema in catalog.TABLE_SCHEMAS) {
	       foreach(var table in schema.TABLE_NAMES) { 
			  this.GenerationEnvironment.Clear(); #>
//------------------------------------------------------------------------------
// <auto-generated>
//     테이블 변환 도구.
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------
 
namespace <#=GetCurrentNamespace()#>.Tables
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Web;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using Umc.Core;
	using Umc.Core;
	using Umc.Core.DB;

	public partial class TableNames { public const string <#=GetClassName(table).ToUpper()#> = "<#=catalog.TABLE_CATELOG_NAME#>.<#=schema.TABLE_SCHEMA_NAME#>.<#=table.TABLENAME#>"; }

	public partial interface <#=GetInterfaceName(table)#>
	{
<#         foreach(var column in table.TABLE_COLUMN_NAMES) { #>
		<#=GetValidationAnnotation(column)#>global::<#=RealTypeFrom(column)#> <#=column.COLUMN_NAME#> { get; set; }
<# } #>
	}
}
<#           AddFile(tableProjectItem, GetFileName(table));
		    }
		 }
	 }
	this.GenerationEnvironment.Clear(); #>




<#
   var spList = spTemplate.Execute();
   var spProjectItem = AddFolder("SP");
   this.GenerationEnvironment.Clear();
   foreach(var sp in spList) {
	   this.GenerationEnvironment.Clear();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     SP 변환 도구
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------
 
namespace <#=GetCurrentNamespace()#>.StoredProcedures
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Web;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using Umc.Core;
	using Umc.Core;
	using Umc.Core.Data;
	using Umc.Core.DB;

	public partial class SPNames { public const string <#=sp.SP_NAME.ToUpper()#> = "<#=sp.SP_NAME#>"; }

	/// <summary>
	/// <#=sp.SP_NAME#> 프로시저의 인터페이스입니다.
	/// </summary>
	[Name(SPNames.<#=sp.SP_NAME.ToUpper()#>)]
	public partial interface <#=GetInterfaceName(sp.SP_NAME)#>
	{
<#		foreach(var column in sp.SP_DATA) { #>
		/// <summary> <#=string.Format("{0} [{1}] 파라메터의 값을 읽거나 가져옵니다.", GetSpParam(column.PARAMETER_NAME), column.PARAMETER_MODE)#> </summary>
		<#=GetValidationAnnotation(column)#><#=GetParameterDirection(column.PARAMETER_MODE)#>global::<#=RealTypeFromSP(column)#> <#=GetSpParam(column.PARAMETER_NAME)#> { get; set; }
<#		} #>
	}
}
<#	 AddFile(spProjectItem, GetFileName(sp.SP_NAME));
   }
   this.GenerationEnvironment.Clear();
#>
<#
   var modelProjectItem = AddFolder("Models");
   this.GenerationEnvironment.Clear();

   foreach(var sp in spList) {
		this.GenerationEnvironment.Clear();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     DAO 변환 도구
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=GetCurrentNamespace()#>.Models
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Web;
	using System.Collections;
	using System.Collections.Generic;
	using Umc.Core;
	using Umc.Core.DAO;
	using Umc.Core;
	using Umc.Core.Data;
	using Umc.Core.DB;

	/// <summary>
	/// <#=sp.SP_NAME#> 프로시저의 결과를 반환하는 인터페이스 모델입니다.
	/// </summary>
	public partial interface <#=GetInterfaceName(sp.SP_NAME)#>_Result
	{
<#		DataTable spResult = spTemplate.ExecuteSpResult(sp);
	    foreach(DataColumn column in spResult.Columns) { #>
		global::<#=column.DataType#><#=column.AllowDBNull && column.DataType != typeof(string) && !column.DataType.IsArray ? "?" : ""#> <#=column.ColumnName#> { get; set; }
<# } #>
	}
}	
<#		AddFile(modelProjectItem, GetModelFileName(sp.SP_NAME));
   }
#>
<#
	this.GenerationEnvironment.Clear();

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     DAO 변환 도구
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=GetCurrentNamespace()#>
{
	using System;
	using System.Data;
	using System.Linq;
	using System.Web;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using Umc.Core;
	using Umc.Core.DAO;
	using Umc.Core;
	using Umc.Core.Data;
	using Umc.Core.DB;
	using <#=GetCurrentNamespace()#>.Models;
<# if(tables.TABLE_CATALOGS.Count > 0) { #>using <#=GetCurrentNamespace()#>.Tables;<#}#>
	using <#=GetCurrentNamespace()#>.StoredProcedures;

	public partial class <#=GetLastNamespace()#>_DbContext
	{
		public string ConnectionString { get; protected set; }

		public <#=GetLastNamespace()#>_DbContext() { }
		public <#=GetLastNamespace()#>_DbContext(string connectionString) { this.ConnectionString = connectionString; }
		public <#=GetLastNamespace()#>_DbContext(ISQLConnectionStringProvider connectionStringProvider) : this(connectionStringProvider.GetConnectionString()) { }

<# foreach(var sp in spList) {
	   var spInterface = GetInterfaceName(sp.SP_NAME);
	   var tmodelInterface = GetInterfaceName(sp.SP_NAME) + "_Result";
	   var isPlural = IsPlural(sp.SP_NAME);
	   var returnType = isPlural ? string.Format("IList<{0}>", tmodelInterface) : tmodelInterface;
	   var tmodelReturnType = isPlural ? "IList<TModel>" : "TModel";
	   var executeType = isPlural ? "ExecuteList()" : "Execute()";
#>
		#region <#=sp.SP_NAME#> StoredProcessdure
		/// <summary>
		///		<#=sp.SP_NAME#> 프로시저를 호출하고 그 결과를 반환합니다.
		/// </summary>
		/// <param name="input">프로시저 매개변수로 전달할 모델 인터페이스 입니다.</param>
		public <#=returnType#> <#=sp.SP_NAME#>(<#=spInterface#> input)
		{
			var sp = new SP<<#=spInterface#>, <#=tmodelInterface#>>(input, this.ConnectionString)<#=!sp.HasFrkParameter ? " { HasSpResult = false }" : ""#>;
<#		Write("\t\t\tsp");
	    var cnt = 0;
	    foreach(var column in sp.SP_DATA) { cnt++; Write(cnt > 1 ? "\t\t\t  " : "");#>
.AddParameter(_ => _.<#=GetSpParam(column.PARAMETER_NAME)#>, input.<#=GetSpParam(column.PARAMETER_NAME)#><#=column.CHARACTER_MAXIMUM_LENGTH != null ? ", " + (int)column.CHARACTER_MAXIMUM_LENGTH : ""#>)<#=cnt == sp.SP_DATA.Count ? ";" : ""#>
<#		} #>
			
		
			return sp.<#=executeType#>;
		}

		/// <summary>
		///		<#=sp.SP_NAME#> 프로시저를 호출하고 그 결과를 반환합니다.
		/// </summary>
<#      foreach(var column in sp.SP_DATA) { 
#>
		/// <param name="<#=GetSpParam(column.PARAMETER_NAME)#>"><#=GetParamComment(column)#></param>
<#      } #>
		public <#=returnType#> <#=sp.SP_NAME#>(
<#		cnt = 0; foreach(var column in sp.SP_DATA) { cnt++; #>
																					/* <#=column.PARAMETER_MODE#> */	<#=RealTypeFromSP(column)#> <#=GetSpParam(column.PARAMETER_NAME)#><#=cnt == sp.SP_DATA.Count ? "" : ",\r\n"#><#		} #>)
		{
			var input = SP.Resolve<<#=GetInterfaceName(sp.SP_NAME)#>>();
<#			foreach(var column in sp.SP_DATA) { #>
			input.<#=GetSpParam(column.PARAMETER_NAME)#> = <#=GetSpParam(column.PARAMETER_NAME)#>;
<# } #>

			return <#=sp.SP_NAME#>(input);
		}

		/// <summary>
		///		<#=sp.SP_NAME#> 프로시저를 호출하고 그 결과를 반환합니다.
		/// </summary>
<#      foreach(var column in sp.SP_DATA) { 
#>
		/// <param name="<#=GetSpParam(column.PARAMETER_NAME)#>"><#=GetParamComment(column)#></param>
<#      } #>
		/// <param name="input">SP에 전달되는 파라메터 인터페이스 객체입니다.</param>
		public <#=returnType#> <#=sp.SP_NAME#>(
<#		cnt = 0; foreach(var column in sp.SP_DATA) { cnt++; #>
																					/* <#=column.PARAMETER_MODE#> */	<#=RealTypeFromSP(column)#> <#=GetSpParam(column.PARAMETER_NAME)#><#=cnt == sp.SP_DATA.Count ? "" : ",\r\n"#><#		} #>

																					, out <#=GetInterfaceName(sp.SP_NAME)#> input)
		{
			input = SP.Resolve<<#=GetInterfaceName(sp.SP_NAME)#>>();
<#			foreach(var column in sp.SP_DATA) { #>
			input.<#=GetSpParam(column.PARAMETER_NAME)#> = <#=GetSpParam(column.PARAMETER_NAME)#>;
<# } #>

			return <#=sp.SP_NAME#>(input);
		}
		/// <summary>
		///		<#=sp.SP_NAME#> 프로시저를 호출하고 그 결과를 반환합니다.
		/// </summary>
		/// <typeparam name="TModel">프로시저를 실행한 결과를 담을 모델 인터페이스입니다.</typeparam>
		public <#=tmodelReturnType#> <#=sp.SP_NAME#><TModel>(<#=spInterface#> input) where TModel : class
		{
			var sp = new SP<<#=spInterface#>, TModel>(input, this.ConnectionString)<#=!sp.HasFrkParameter ? " { HasSpResult = false }" : ""#>;
<#		Write("\t\t\tsp");
	    cnt = 0;
	    foreach(var column in sp.SP_DATA) { cnt++; Write(cnt > 1 ? "\t\t\t  " : "");#>
.AddParameter(_ => _.<#=GetSpParam(column.PARAMETER_NAME)#>, input.<#=GetSpParam(column.PARAMETER_NAME)#><#=column.CHARACTER_MAXIMUM_LENGTH != null ? ", " + (int)column.CHARACTER_MAXIMUM_LENGTH : ""#>)<#=cnt == sp.SP_DATA.Count ? ";" : ""#>
<#		} #>
			
			return sp.<#=executeType#>;
		}

		/// <summary>
		///		<#=sp.SP_NAME#> 프로시저를 호출하고 그 결과를 반환합니다.
		/// </summary>
		/// <typeparam name="TModel">프로시저를 실행한 결과를 담을 모델 인터페이스입니다.</typeparam>
<#      foreach(var column in sp.SP_DATA) { 
#>
		/// <param name="<#=GetSpParam(column.PARAMETER_NAME)#>"><#=GetParamComment(column)#></param>
<#      } #>
		public <#=tmodelReturnType#> <#=sp.SP_NAME#><TModel>(
<#		cnt = 0; foreach(var column in sp.SP_DATA) { cnt++; #>
																					/* <#=column.PARAMETER_MODE#> */	<#=RealTypeFromSP(column)#> <#=GetSpParam(column.PARAMETER_NAME)#><#=cnt == sp.SP_DATA.Count ? "" : ",\r\n"#><#		} #>) where TModel : class
		{
			var input = SP.Resolve<<#=GetInterfaceName(sp.SP_NAME)#>>();
<#			foreach(var column in sp.SP_DATA) { #>
			input.<#=GetSpParam(column.PARAMETER_NAME)#> = <#=GetSpParam(column.PARAMETER_NAME)#>;
<# } #>

			return <#=sp.SP_NAME#><TModel>(input);
		}
		#endregion





<# } #>
	}
}
<#
   AddFile(((EnvDTE.ProjectItem)GetProjectItem(this.Host.TemplateFile).Collection.Parent), GetLastNamespace() + "_DbContext.cs");
   this.GenerationEnvironment.Clear();
#>
<#+
	public class TableTemplate 
	{
		public string ConnectionString { get; set; }
		public string Filter { get; set;}
	
		const string SQL_TABLE_INFORMATION = @"
	SELECT T.TABLE_CATALOG, T.TABLE_SCHEMA, T.TABLE_NAME
		 , C.COLUMN_NAME, C.ORDINAL_POSITION, C.IS_NULLABLE, C.DATA_TYPE, C.CHARACTER_MAXIMUM_LENGTH
		 , K.ORDINAL_POSITION AS KEY_ORDINAL_POSITION
	  FROM INFORMATION_SCHEMA.TABLES T
	  JOIN INFORMATION_SCHEMA.COLUMNS C                   ON C.TABLE_CATALOG=T.TABLE_CATALOG 
														 AND C.TABLE_SCHEMA=T.TABLE_SCHEMA
														 AND C.TABLE_NAME=T.TABLE_NAME
	LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE K       ON K.TABLE_CATALOG=T.TABLE_CATALOG 
														 AND K.TABLE_SCHEMA=T.TABLE_SCHEMA
														 AND K.TABLE_NAME=T.TABLE_NAME
														 AND K.COLUMN_NAME=C.COLUMN_NAME
    ORDER BY T.TABLE_CATALOG, T.TABLE_SCHEMA, T.TABLE_NAME, C.ORDINAL_POSITION
	";


		public TABLE Execute()
		{
			var table = new TABLE();
			var cmd = new SqlCommand(SQL_TABLE_INFORMATION, new SqlConnection(this.ConnectionString));
			using(cmd)
			{
				cmd.Connection.Open();

				using(var reader = cmd.ExecuteReader(CommandBehavior.CloseConnection))
				{
					while(reader.Read()) {

						var TABLE_CATALOG		= reader["TABLE_CATALOG"].ToString();
						var TABLE_SCHEMA		= reader["TABLE_SCHEMA"].ToString();
						var TABLE_NAME			= reader["TABLE_NAME"].ToString();
						var COLUMN_NAME			= reader["COLUMN_NAME"].ToString();
						var ORDINAL_POSITION	= (int)reader["ORDINAL_POSITION"];
						var IS_NULLABLE			= reader["IS_NULLABLE"].ToString();
						var DATA_TYPE			= reader["DATA_TYPE"].ToString();
						var KEY_ORDINAL_POSITION = reader["KEY_ORDINAL_POSITION"] as Nullable<int>;
						var CHARACTER_MAXIMUM_LENGTH = reader["CHARACTER_MAXIMUM_LENGTH"] as Nullable<int>;


						var isMatch = false;
						foreach(var arr in this.Filter.Split(',')) {
							if (System.Text.RegularExpressions.Regex.IsMatch(TABLE_NAME, arr))
							{
								isMatch = true; 
								break;
							}
						}

						if (!isMatch) continue;

						var catalog = table.TABLE_CATALOGS.LastOrDefault() ?? new TABLE_CATALOG();
						var schema = catalog.TABLE_SCHEMAS.LastOrDefault() ?? new TABLE_SCHEMA();
						var tablename = schema.TABLE_NAMES.LastOrDefault() ?? new TABLE_NAME();

						if (catalog.TABLE_CATELOG_NAME != TABLE_CATALOG) { table.TABLE_CATALOGS.Add(catalog = new TABLE_CATALOG() {TABLE_CATELOG_NAME = TABLE_CATALOG}); }
						if (schema.TABLE_SCHEMA_NAME != TABLE_SCHEMA) { catalog.TABLE_SCHEMAS.Add(schema = new TABLE_SCHEMA() {TABLE_SCHEMA_NAME = TABLE_SCHEMA}); }
						if (tablename.TABLENAME != TABLE_NAME) { schema.TABLE_NAMES.Add(tablename = new TABLE_NAME() {TABLENAME = TABLE_NAME}); }

						var column = new TABLE_COLUMN_NAME() 
						{
							COLUMN_NAME = COLUMN_NAME,
							ORDINAL_POSITION = ORDINAL_POSITION,
							IS_NULLABLE = IS_NULLABLE,
							DATA_TYPE = DATA_TYPE,
							KEY_ORDINAL_POSITION = KEY_ORDINAL_POSITION,
							CHARACTER_MAXIMUM_LENGTH = CHARACTER_MAXIMUM_LENGTH
						};
						tablename.TABLE_COLUMN_NAMES.Add(column);
					}
				}

				cmd.Connection.Close();
			};

			return table;
		}
	}


	#region TABLE ENTITY
	public class TABLE
	{
		public TABLE() { TABLE_CATALOGS = new List<TABLE_CATALOG>(); }
		public IList<TABLE_CATALOG> TABLE_CATALOGS { get; set; }
	}

	public class TABLE_CATALOG
	{
		public TABLE_CATALOG() { TABLE_SCHEMAS = new List<TABLE_SCHEMA>(); }
		public string TABLE_CATELOG_NAME { get; set; }
		public IList<TABLE_SCHEMA> TABLE_SCHEMAS { get; set; }
	}

	public class TABLE_SCHEMA
	{
		public TABLE_SCHEMA() { TABLE_NAMES = new List<TABLE_NAME>(); }
		public string TABLE_SCHEMA_NAME { get; set; }
		public IList<TABLE_NAME> TABLE_NAMES { get; set; }
	}

	public class TABLE_NAME
	{
		public TABLE_NAME() { TABLE_COLUMN_NAMES = new List<TABLE_COLUMN_NAME>(); }
		public string TABLENAME { get; set; }
		public IList<TABLE_COLUMN_NAME> TABLE_COLUMN_NAMES { get; set; }
	}

	public class TABLE_COLUMN_NAME
	{
		public string COLUMN_NAME { get; set; }
		public int ORDINAL_POSITION { get; set; }
		public string IS_NULLABLE { get; set; }
		public string DATA_TYPE { get; set; }
		public int? KEY_ORDINAL_POSITION { get; set; }
		public int? CHARACTER_MAXIMUM_LENGTH { get; set; }
	}
	#endregion
#>
<#+
	public class SPTemplate
	{
		private readonly string SQL_OF_SP_SCHEMA_INFORMATION = @"
	SELECT	*
	  FROM	INFORMATION_SCHEMA.PARAMETERS
	 --WHERE	--SPECIFIC_CATALOG = @DbName
	        -- SPECIFIC_NAME = @SpName
	   --PARAMETER_NAME NOT IN ('@frk_n4ErrorCode', '@frk_strErrorText', '@frk_isRequiresNewTransaction')
	ORDER BY 1 ASC, 2 ASC, 3 ASC, 4 ASC
	";

		public string DbName { get; set; }
		public string SelectSPName { get;set; }
		public string SelectSamplingQuery { get; set; }
		public string Filter { get; set; }
		public bool   IsRetrieveRecordset { get; set; }
		public string SQLConnectionStringProvider { get; set; }
		public string ServiceCode { get; set; }
		public bool IsListResult { get; set; }
		public string ConnectionString { get; set; }

		public IList<SP_NAME_T> Execute()
		{
			var spName = "";
			var splist = new List<SP_NAME_T>();

			SP_NAME_T name_t = null;
			var dt = new DataTable();
			var da = new SqlDataAdapter(SQL_OF_SP_SCHEMA_INFORMATION, ConnectionString);
			//da.SelectCommand.Parameters.AddWithValue("@DbName", this.DbName);
			//da.SelectCommand.Parameters.AddWithValue("@SpName", arr.Trim());
			da.Fill(dt);

			foreach(DataRow row in dt.Rows) {
				foreach(var arr in this.Filter.Split(',')) {
					if (!(this.Filter == "" || this.Filter == "*") && !System.Text.RegularExpressions.Regex.IsMatch(row["SPECIFIC_NAME"].ToString(), arr))
						continue;

					if (spName != row["SPECIFIC_NAME"].ToString()) {
						name_t = new SP_NAME_T() {SP_NAME = row["SPECIFIC_NAME"].ToString()};
						splist.Add(name_t);

						spName = row["SPECIFIC_NAME"].ToString();
					}

					var data_t = new SP_DATA_T();
					data_t.PARAMETER_NAME = row["PARAMETER_NAME"].ToString();

					if (data_t.PARAMETER_NAME == "@frk_n4ErrorCode" || data_t.PARAMETER_NAME == "@frk_strErrorText" || data_t.PARAMETER_NAME == "@frk_isRequiresNewTransaction")
					{
						name_t.HasFrkParameter |= true;
						continue;
					}
					
					data_t.DATA_TYPE			= row["DATA_TYPE"].ToString();
					data_t.PARAMETER_MODE		= row["PARAMETER_MODE"].ToString();
					data_t.ORDINAL_POSITION		= (int)row["ORDINAL_POSITION"];
					data_t.CHARACTER_MAXIMUM_LENGTH = row["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value ? (int?)row["CHARACTER_MAXIMUM_LENGTH"] : null;

					name_t.SP_DATA.Add(data_t);
				}
			}

			return splist;
		}

		private DataTable GetSpResult(string execSpForOutputGenerating) {
			var dt = new DataTable();
			var da = new SqlDataAdapter(execSpForOutputGenerating, ConnectionString);
			da.Fill(dt);

			return dt;
		}

		public DataTable ExecuteSpResult(SP_NAME_T sp) {
			var spBuilder = new StringBuilder();
			spBuilder.AppendLine("DECLARE	@return_value__________ int");

			if (sp.HasFrkParameter) {
				spBuilder.AppendLine(@"
      , @frk_n4ErrorCode int
      , @frk_strErrorText nvarchar(100)
      , @frk_isRequiresNewTransaction tinyint = 1");
			}
			foreach(var spParam in sp.SP_DATA) {
				if (spParam.PARAMETER_MODE.Contains("OUT")) spBuilder.AppendFormat("      , {0} {1}\n", spParam.PARAMETER_NAME, spParam.DATA_TYPE);
			}
			spBuilder.AppendLine(";");

			spBuilder.AppendFormat("exec @return_value__________ = {0}\n", sp.SP_NAME);
			if (sp.HasFrkParameter) {
				spBuilder.AppendLine(@"
       @frk_n4ErrorCode = @frk_n4ErrorCode OUTPUT
     , @frk_strErrorText = @frk_strErrorText OUTPUT
     , @frk_isRequiresNewTransaction = @frk_isRequiresNewTransaction");
			}

			var index = sp.HasFrkParameter ? 1 : 0;
			foreach(var spParam in sp.SP_DATA) {
				var value = "''";
				if (spParam.DATA_TYPE.Contains("binary")) value = "0";

				if (index > 0) spBuilder.Append("     , ");
				if (spParam.PARAMETER_MODE.Contains("OUT")) spBuilder.AppendFormat("     {0} = {0} OUTPUT\n", spParam.PARAMETER_NAME);
				else spBuilder.AppendFormat("     {0} = {1}\n", spParam.PARAMETER_NAME, value);
				index++;
			}
			spBuilder.AppendLine(";");
			
			var spResult = this.GetSpResult(spBuilder.ToString());
			return spResult;
		}
	}

	#region SP ENTITY
	
	public class SP_NAME_T {
		public string SP_NAME { get; set; }
		public IList<SP_DATA_T> SP_DATA { get; set; }
		public bool   HasFrkParameter { get; set; }

		public SP_NAME_T() {
			SP_DATA = new List<SP_DATA_T>();
		}
	}

	public class SP_DATA_T {
		public int    ORDINAL_POSITION { get; set; }
		public string PARAMETER_MODE { get; set; }
		public string IS_RESULT { get; set; }
		public string AS_LOCATOR { get; set; }
		public string PARAMETER_NAME { get; set; }
		public string DATA_TYPE { get; set; }
		public int? CHARACTER_MAXIMUM_LENGTH { get; set; }
	}

	#endregion
#>
<#+
	private string GetInterfaceName(TABLE_NAME table)
	{
		return "I" + GetClassName(table);
	}

	private string GetInterfaceName(string name)
	{
		return GetInterfaceName(new TABLE_NAME() { TABLENAME = name });
	}

	private string GetClassName(TABLE_NAME table)
	{
		return table.TABLENAME;
	}

	private string GetFileName(TABLE_NAME table)
	{
		return string.Format("{0}.generated.cs", GetInterfaceName(table));
	}

	private string GetModelFileName(string name)
	{
		return string.Format("{0}_Result.generated.cs", GetInterfaceName(name));
	}

	private string GetFileName(string name)
	{
		return GetFileName(new TABLE_NAME() { TABLENAME = name});
	}

	private string GetColumnName(string columnName)
	{
		return columnName;
	}

	private string GetSpParam(string columnName)
	{
		if (columnName.IndexOf('@') == 0)
			return columnName.Remove(0,1);

		return columnName;
	}

	private string GetParameterDirection(string inout) 
	{
		var attr = "";

		if (inout == "IN") { attr = "[Input] "; }
		else if (inout == "OUT") { attr = "[Output] "; }
		else if (inout == "INOUT") { attr = "[Input, Output] "; }

		return attr;
	}

	private static System.CodeDom.Compiler.CodeDomProvider codedom = System.CodeDom.Compiler.CodeDomProvider.CreateProvider("CSharp");
	public string RealTypeFrom(TABLE_COLUMN_NAME column)
	{
		var dbtype = (SqlDbType)Enum.Parse(typeof(SqlDbType), column.DATA_TYPE, true);
		var type = TypeFrom(dbtype);
		//var isNullable = column.IS_NULLABLE == "YES";
		var isNullable = true;
		
		if (type.IsValueType && isNullable)
		{
			return type.FullName + "?";
			//var t = typeof(Nullable<>).MakeGenericType(type);
			//return codedom.GetTypeOutput(new System.CodeDom.CodeTypeReference(t));
		}

		return type.FullName;
	}

	protected string RealTypeFromSP(SP_DATA_T data)
	{
		var dbtype = (SqlDbType)Enum.Parse(typeof(SqlDbType), data.DATA_TYPE, true);
		var type = TypeFrom(dbtype);

		if (type.IsPrimitive || type == typeof(DateTime)) return type.FullName + "?";
		
		return type.FullName;
	}

	private Type TypeFrom(SqlDbType type)
	{
		switch(type)
		{
			case SqlDbType.BigInt: return typeof (Int64);
			case SqlDbType.Int: return typeof (Int32);
			case SqlDbType.SmallInt: return typeof (Int16);
			case SqlDbType.TinyInt: return typeof(byte);
			case SqlDbType.Bit: return typeof (bool);
			case SqlDbType.Char:
			case SqlDbType.NChar:
			case SqlDbType.VarChar:
			case SqlDbType.Text:
			case SqlDbType.NVarChar: return typeof (string);
			case SqlDbType.Date:
			case SqlDbType.DateTime:
			case SqlDbType.DateTime2: return typeof (DateTime);
			case SqlDbType.DateTimeOffset: return typeof (DateTimeOffset);
			case SqlDbType.Time: return typeof(TimeSpan);
			case SqlDbType.Decimal: 
			case SqlDbType.Money: return typeof(decimal);
			case SqlDbType.Real: return typeof (Single);
			case SqlDbType.Float: return typeof (float);
			case SqlDbType.Image: return typeof (byte[]);
			case SqlDbType.UniqueIdentifier: return typeof(Guid);
			case SqlDbType.Binary: 
			case SqlDbType.VarBinary: return typeof(byte[]);
		}

		return typeof(object);
	}

	private string GetValidationAnnotation(SP_DATA_T data) {
		var sbAttributes = new StringBuilder();
		var dbtype = (SqlDbType)Enum.Parse(typeof(SqlDbType), data.DATA_TYPE, true);
		var type = TypeFrom(dbtype);

		if (type == typeof(string)) sbAttributes.AppendFormat("[StringLength({0})]", data.CHARACTER_MAXIMUM_LENGTH);

		if (sbAttributes.Length > 0) sbAttributes.AppendLine().Append("\t\t");

		return sbAttributes.ToString();
	}

	private string GetValidationAnnotation(TABLE_COLUMN_NAME data) {
		var sbAttributes = new StringBuilder();
		if (data.IS_NULLABLE == "NO") sbAttributes.AppendFormat("[Required]");
		
		var dbtype = (SqlDbType)Enum.Parse(typeof(SqlDbType), data.DATA_TYPE, true);
		var type = TypeFrom(dbtype);


		if (type == typeof(string)) sbAttributes.AppendFormat("[StringLength({0})]", data.CHARACTER_MAXIMUM_LENGTH);

		if (sbAttributes.Length > 0) sbAttributes.AppendLine().Append("\t\t");

		return sbAttributes.ToString();
	}

	private string GetParamComment(SP_DATA_T column) {
		return string.Format("{0} [{1}] {2} 파라메터의 값입니다.", GetSpParam(column.PARAMETER_NAME), column.PARAMETER_MODE, column.DATA_TYPE);
	}

	private EnvDTE.DTE GetDte() {
		var provider = (IServiceProvider)this.Host;
		return (EnvDTE.DTE)provider.GetService(typeof(EnvDTE.DTE));
	}

	private EnvDTE.Project GetProject() {
		return GetDte().Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
	}

	private EnvDTE.ProjectItem GetProjectItem(string path) {
		return GetDte().Solution.FindProjectItem(path);
	}

	private string GetDefaultNamespace() {
		return GetProject().Properties.Item("DefaultNamespace").Value.ToString();
	}

	private string GetNamespace() {
		var dte = GetDte();
		var projectPath = Path.GetDirectoryName(GetProject().FileName);
		var filePath = Path.GetDirectoryName(GetProjectItem(this.Host.TemplateFile).FileNames[0]);
		
		var namespaceSuffix = filePath.Remove(0, projectPath.Length+1).Replace("\\",".");
		return GetDefaultNamespace()+"."+namespaceSuffix;
	}

	private void AddFile(string file) {
		AddFile(GetProjectItem(this.Host.TemplateFile), file);
	}

	private void AddFile(EnvDTE.ProjectItem item, string filename)
	{
		var dte = GetDte();
		var dir = Path.GetDirectoryName(item.get_FileNames(1));
		var path = Path.Combine(dir, filename);
		if (File.Exists(path)) { 
			var removeItem = dte.Solution.FindProjectItem(path);
			if (removeItem != null) removeItem.Remove();
			File.Delete(path); 
		}
		File.WriteAllText(path, this.GenerationEnvironment.ToString());
		item.ProjectItems.AddFromFile(path);
	}

	private EnvDTE.ProjectItem AddFolder(string name)
	{
		var dte = GetDte();
		var dir = Path.GetDirectoryName(this.Host.TemplateFile);
		var path = Path.Combine(dir, name);
		var projectItem = GetProjectItem(this.Host.TemplateFile);
		if (!Directory.Exists(path))
			Directory.CreateDirectory(path);

		projectItem = projectItem.Collection.Parent as EnvDTE.ProjectItem;
		return projectItem.ProjectItems.AddFromDirectory(path);
	}

	private string GetCurrentNamespace() 
	{
		return (System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") ?? "").ToString();
	}

	private string GetLastNamespace()
	{
		var ns = GetCurrentNamespace();
		var index = ns.LastIndexOf(".");
		if (index == -1) return ns;

		return ns.Remove(0, index+1);
	}

	private bool IsPlural(string name) {
		name = name.ToLower();

		if (name.EndsWith("list"))
			return true;

		if (!name.EndsWith("ss") && (name.EndsWith("ies") || name.EndsWith("es") || name.EndsWith("s")))
			return true;

		return false;
	}
#>