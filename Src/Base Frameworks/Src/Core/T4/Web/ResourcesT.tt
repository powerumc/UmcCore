<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Web.UI;
using Umc.Core.<#= ReplaceForResourceNamespace(Path.GetFileName(this.Host.ResolvePath(""))) #>;

<#
	var ALLOW_EXTENSIONS = new Dictionary<string, string>() 
	{
		{ ".js", "text/javascript" },
		{ ".css", "text/css" }
	};
#>
<#
	// 웹리소스 랜더링
	var dirs = GetDirectories(this.Host.ResolvePath(""));
	foreach(var dir in dirs)
	{
		var files = GetFiles(Path.Combine(this.Host.ResolvePath("..\\"), dir), ALLOW_EXTENSIONS);
		if (files.Count() == 0) continue;

		var reducedDirs = dir.Split('\\');
		var @namespace = "";
		foreach(var pieceDir in reducedDirs)
		{
			@namespace += (ReplaceDisplayForResourceName(pieceDir).ToUpper() + ".");
		}
		foreach(var f in files)
		{
			Write("[assembly: WebResource(");
			var variableName = ReplaceDisplayForResourceName(Path.GetFileName(f).ToUpper());
			var variableValue = ReplaceDisplayForResourceName(Path.Combine(dir, Path.GetFileName(f)));
			Write(string.Format("{0}{1}, \"{2}\"", @namespace, variableName, ALLOW_EXTENSIONS[Path.GetExtension(f)]));
			WriteLine(")]");
		}
	}
#>

namespace Umc.Core.<#= ReplaceForResourceNamespace(Path.GetFileName(this.Host.ResolvePath(""))) #>
{
<#
	// 클래스 랜더링
	foreach(var dir in dirs)
	{
		var files = GetFiles(Path.Combine(this.Host.ResolvePath("..\\"), dir), ALLOW_EXTENSIONS);
		if (files.Count() == 0) continue;

		var reducedDirs = dir.Split('\\');
		var indent = 0;
		foreach(var pieceDir in reducedDirs)
		{
			PushIndent("\t");
#>
public static partial class <#= ReplaceForClassName(pieceDir).ToUpper() #>
{
<#
			indent++;
		}

		foreach(var f in files)
		{
			var variableName = ReplaceDisplayForResourceName(Path.GetFileName(f)).ToUpper();
			var variableValue = ReplaceForResourceNamespace(dir) + "." + Path.GetFileName(f);
#>
	public const string <#= variableName #> = "Umc.Core.<#= variableValue #>";
<#
		}
		for(var i=0; i<indent; i++)
		{
			WriteLine("}");
			PopIndent();
		}
#>
<#
	}
#>
}
<#+
    private IEnumerable<string> GetDirectories(string directoryPath)
    {
		var dirs = Directory.EnumerateDirectories(directoryPath);
		foreach(var d in dirs) 
		{
			var dirName = new DirectoryInfo(d).Name.ToLower();
			if (dirName == "temp" || dirName == "bin" || dirName == "obj") continue;

			yield return GetRelativePath(d);

			foreach(var sub in GetDirectories(d))
			{
				yield return sub;
			}
		}
    }

	private IEnumerable<string> GetFiles(string directoryPath, IDictionary<string, string> allowExtensions)
	{
		foreach(var file in Directory.GetFiles(directoryPath))
		{
			if (!IsAllowFileExtension(file, allowExtensions)) continue;

			yield return GetRelativePath(file);
		}
	}

	private string GetRelativePath(string path)
	{
		return path.Remove(0, this.Host.ResolvePath("").LastIndexOf("\\") + 1);
	}

	private string ReplaceDisplayForResourceName(string path)
	{
		path = path.Replace(".", "_").Replace("-", "_").Replace("\\", ".").Replace("$", "_");
		return path;
	}

	private string ReplaceForResourceNamespace(string path)
	{
		// ([^a-zA-Z()+-.][0-9]*[0-9])
		path = System.Text.RegularExpressions.Regex.Replace(path, "[^a-zA-Z-]([0-9]+)", "._$1");
		path = path.Replace("-", "_").Replace("\\", ".").Replace("$", "_");
		return path;
	}

	private string ReplaceForClassName(string path)
	{
		path = System.Text.RegularExpressions.Regex.Replace(path, "([^a-zA-Z()+-._][0-9]*[0-9]*)", "$1");
		path = path.Replace(".", "_").Replace("-", "_").Replace("\\", ".").Replace("$", "_");
		return path;
	}

	private bool IsAllowFileExtension(string file, IDictionary<string, string> allowExtensions)
	{
		return allowExtensions.Any( _ => file.EndsWith(_.Key, StringComparison.OrdinalIgnoreCase));
	}
#>