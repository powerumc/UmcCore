<#@ template debug="true" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Drawing" #>
<#@ output extension=".cs" #>
<#
	var conn = "server=218.153.7.35; uid=agentKrWeb; pwd=$dnpqroqkf45xla$; database=KrUser00";
	var templates = new SPTemplates(conn) 
	{
		DbName = "KrUser00",
		SPName = "spwIntegrateQuestValueGet",
		IsRetrieveRecordset = false,
		SQLConnectionStringProvider = "new com.nexon.kart.BizLogic.DAO.KartGameConnectionStringProvider()",
		ServiceCode = "ServiceCode.kartweb",
		IsListResult = false

	};
	templates.ExecSpForOutputGenerating = string.Format("exec {0} {1}", templates.SPName,"1,1");
	
	var splist = templates.GetSpSpecific();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//------------------------------------------------------------------------------
 
namespace com.nexon.kart.BizLogic.SP.Kart
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Data;
	using System.Linq;
	using System.Web;
	using Umc.Core;
	using Umc.Core.DAO;
	using Umc.Core;

<# foreach(var sp in splist) {
	var dt = templates.GetSpResult();
#>
	public partial class <#=sp.SPECIFIC_NAME#> : SPNoWrapperBase<<#=sp.SPECIFIC_NAME#>_Result<#=templates.IsListResult ? "_List" : ""#>>
	{
		public <#=sp.SPECIFIC_NAME#>()
			: base()
		{
			this.SPName = "<#=sp.SPECIFIC_NAME#>";
			this.SQLConnectionStringProvider = <#=templates.SQLConnectionStringProvider#>;
			this.IsRetrieveRecordset = <#=templates.IsRetrieveRecordset.ToString().ToLower()#>;
		}

		protected override ServiceCode serviceCode
		{
			get { return <#=templates.ServiceCode#>; }
		}


<# foreach(var f in sp.SPECIFIC_DATA) { #>
		internal global::<#=ColumnTypeConverter.Conveter(f.DATA_TYPE)#> <#=f.PARAMETER_NAME.Remove(0,1)#> { set { this["<#=f.PARAMETER_NAME.Remove(0,1)#>"] = value; } }
<# } #>
		protected override void InitializeParameters()
		{
<# foreach(var f in sp.SPECIFIC_DATA) { #>
			this.AddParameter("<#=f.PARAMETER_NAME.Remove(0,1)#>", SqlDbType.<#=ColumnTypeConverter.ConveterFrom(f.DATA_TYPE)#>, ParameterDirection.<#=ColumnTypeConverter.ConvertParameterDirection(f.PARAMETER_MODE)#>);
<# } #>
		}

		protected override void GenerateDataEntity(int TableIndex, System.Data.SqlClient.SqlDataReader dataReader)
		{
<#  if (templates.IsListResult) { #>
			var entity = new <#=sp.SPECIFIC_NAME#>_Result()
			{
<#		foreach(DataColumn c in dt.Columns) { #>
				<#=c.ColumnName#> = dataReader["<#=c.ColumnName#>"].DefaultValueIfEmpty<global::<#=c.DataType#><#=c.AllowDBNull ? "?":""#>>(),
<#		} #>
			};
			Result.Add(entity);
<# }
   else {
	foreach(DataColumn c in dt.Columns) { 
#>
			Result.<#=c.ColumnName#> = dataReader["<#=c.ColumnName#>"].DefaultValueIfEmpty<global::<#=c.DataType#><#=c.AllowDBNull ? "?":""#>>();
<# 
	}
} 
#>
		}

		protected override void GenerateOutputParameter()
		{
<#	foreach(var f in sp.SPECIFIC_DATA) { 
		if (f.PARAMETER_MODE == "IN") continue; #>
			Result.<#=f.PARAMETER_NAME.Remove(0,1)#> = this["<#=f.PARAMETER_NAME.Remove(0,1)#>"].DefaultValueIfEmpty<global::<#=ColumnTypeConverter.Conveter(f.DATA_TYPE)#>>();
<# } #>
		}
	}

	public partial class <#=sp.SPECIFIC_NAME#>_Result <#=templates.IsListResult ? "" : " : global::Umc.Core.DAO.SPResultBase"#>
	{
<# foreach(DataColumn c in dt.Columns) { #>
		public global::<#=c.DataType#><#=c.DataType.IsValueType && dt.Columns[c.ColumnName].AllowDBNull ? "?":""#> <#=c.ColumnName#> { get; set; }
<# } #>
<# foreach(var f in sp.SPECIFIC_DATA) { 
	   if (f.PARAMETER_MODE == "IN") continue;
#>
		public global::<#=ColumnTypeConverter.Conveter(f.DATA_TYPE)#> <#=f.PARAMETER_NAME.Remove(0,1)#> { get; set; }
<# } #>
	}

<# if (templates.IsListResult) { var type = sp.SPECIFIC_NAME + "_Result"; #>
	public partial class <#=sp.SPECIFIC_NAME#>_Result_List : global::Umc.Core.DAO.SPResultBase, IList<<#=type#>>
	{
		IList<<#=type#>> list = new List<<#=type#>>();

		#region Implementation of IEnumerable

		public IEnumerator<<#=type#>> GetEnumerator() { return list.GetEnumerator(); }
		IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); }

		#endregion

		#region Implementation of ICollection<<#=type#>>

		public void Add(<#=type#> item) { list.Add(item); }
		public void Clear() { list.Clear(); }
		public bool Contains(<#=type#> item) { return list.Contains(item); }
		public void CopyTo(<#=type#>[] array, int arrayIndex) { list.CopyTo(array, arrayIndex); } 
		public bool Remove(<#=type#> item) { return list.Remove(item); } 
		public int Count { get { return list.Count; } }
		public bool IsReadOnly { get { return list.IsReadOnly; } }

		#endregion

		#region Implementation of IList<<#=type#>>

		public int IndexOf(<#=type#> item) { return list.IndexOf(item); } 
		public void Insert(int index, <#=type#> item) { list.Insert(index, item); } 
		public void RemoveAt(int index) { list.RemoveAt(index); } 
		public <#=type#> this[int index] { get { return list[index]; } set { list[index] = value; } }

		#endregion
	}
<# } #>
<# } #>
}

<#+

public class SPECIFIC_NAME_T {
	public string SPECIFIC_NAME { get; set; }
	public IList<SPECIFIC_DATA_T> SPECIFIC_DATA { get; set; }

	public SPECIFIC_NAME_T() {
		SPECIFIC_DATA = new List<SPECIFIC_DATA_T>();
	}
}

public class SPECIFIC_DATA_T {
	public int    ORDINAL_POSITION { get; set; }
	public string PARAMETER_MODE { get; set; }
	public string IS_RESULT { get; set; }
	public string AS_LOCATOR { get; set; }
	public string PARAMETER_NAME { get; set; }
	public string DATA_TYPE { get; set; }
}

public class SPTemplates
{
	private readonly string _connectionString;
	private readonly string SQL_OF_SP_SCHEMA_INFORMATION = @"
SELECT	*
  FROM	INFORMATION_SCHEMA.PARAMETERS
 WHERE	SPECIFIC_CATALOG = @DbName
   AND	SPECIFIC_NAME = @SpName
   AND	PARAMETER_NAME NOT IN ('@frk_n4ErrorCode', '@frk_strErrorText', '@frk_isRequiresNewTransaction')
ORDER BY 1 ASC, 2 ASC, 3 ASC, 4 ASC
";

	public string DbName { get; set; }
	public string SelectSPName { get;set; }
	public string SelectSamplingQuery { get; set; }
	public string SPName { get; set; }
	public bool   IsRetrieveRecordset { get; set; }
	public string SQLConnectionStringProvider { get; set; }
	public string ServiceCode { get; set; }
	public string ExecSpForOutputGenerating { get; set; }
	public bool IsListResult { get; set; }

	public SPTemplates(string connectionString)
	{
		_connectionString = connectionString;
	}

	public IList<SPECIFIC_NAME_T> GetSpSpecific()
	{
		var spName = "";
		var splist = new List<SPECIFIC_NAME_T>();

		foreach(var arr in this.SPName.Split(',')) {
			SPECIFIC_NAME_T name_t = null;
			var dt = new DataTable();
			var da = new SqlDataAdapter(SQL_OF_SP_SCHEMA_INFORMATION, _connectionString);
			da.SelectCommand.Parameters.AddWithValue("@DbName", this.DbName);
			da.SelectCommand.Parameters.AddWithValue("@SpName", arr.Trim());
			da.Fill(dt);

			foreach(DataRow row in dt.Rows) {

				if (spName != row["SPECIFIC_NAME"].ToString()) {
					name_t = new SPECIFIC_NAME_T() {SPECIFIC_NAME = row["SPECIFIC_NAME"].ToString()};
					splist.Add(name_t);

					spName = row["SPECIFIC_NAME"].ToString();
				}

				var data_t = new SPECIFIC_DATA_T()
				{
					PARAMETER_NAME		= row["PARAMETER_NAME"].ToString(),
					DATA_TYPE			= row["DATA_TYPE"].ToString(),
					PARAMETER_MODE		= row["PARAMETER_MODE"].ToString(),
					ORDINAL_POSITION	= (int)row["ORDINAL_POSITION"]
				};

				name_t.SPECIFIC_DATA.Add(data_t);
			}
		}

		return splist;
	}

	public DataTable GetSpResult() {
		var dt = new DataTable();
		var da = new SqlDataAdapter(this.ExecSpForOutputGenerating, _connectionString);
		da.FillSchema(dt, SchemaType.Mapped);
		da.Fill(dt);

		return dt;
	}
}

public static class ColumnTypeConverter
{
	public static Type Conveter(string databaseColumnType, bool isNullable = false)
	{
		switch (databaseColumnType)
		{
			case "varchar": 
			case "nvarchar":
			case "text":
			case "ntext":
				return typeof(string);

			case "image":
				return typeof(System.Drawing.Image);

			case "char": 
			case "nchar":
				return typeof(string);

			case "datetime":
				return isNullable ? typeof(Nullable<DateTime>) : typeof(DateTime);

			case "bit":
				return typeof(bool);

			case "int":
			case "money":
			case "smallint":
			case "real":
				return isNullable ? typeof(Nullable<int>) : typeof(int);

			case "bigint":
				return typeof(Int64);
		}

		throw new ArgumentException("databaseColumnType="+databaseColumnType);
	}

	public static SqlDbType ConveterFrom(string data_type)
	{
		switch (data_type)
		{
			case "varchar": return SqlDbType.VarChar;
			case "nvarchar": return SqlDbType.NVarChar;
			case "text": return SqlDbType.Text;
			case "ntext": return SqlDbType.NText;
			case "image": return SqlDbType.Image;
			case "char": return SqlDbType.Char;
			case "nchar": return SqlDbType.NChar;
			case "datetime": return SqlDbType.DateTime;
			case "bit": return SqlDbType.Bit;
			case "int": return SqlDbType.Int;
			case "money": return SqlDbType.Money;
			case "smallint": return SqlDbType.SmallInt;
			case "real": return SqlDbType.Real;
			case "tinyint": return SqlDbType.TinyInt;
			case "bigint": return SqlDbType.BigInt;
		}

		throw new ArgumentException("data_type="+data_type);
	}

	public static ParameterDirection ConvertParameterDirection(string inout) {
		switch(inout) {
			case "IN": return ParameterDirection.Input;
			case "OUT": return ParameterDirection.Output;
			case "INOUT": return ParameterDirection.InputOutput;
		}

		throw new ArgumentException("inout="+inout);
	}
}
#>